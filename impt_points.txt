node_modules
    This is a directory where all the actual code for your installed dependencies (like Express, React, etc.) lives.

    When you run npm install, all the packages listed in package.json get downloaded here.

    It can be huge because it includes nested dependencies too.

    ‚úÖ You should not edit anything inside this folder manually.
    ‚ùå You should not commit it to Git ‚Äî it‚Äôs usually listed in .gitignore.

package.json

    This is the heart of any Node.js project.
    It defines:
        Project name, version
        Scripts (start, dev, etc.)
        Dependencies (express, etc.)
        Dev dependencies (nodemon, eslint, etc.)
    It‚Äôs the file you edit manually or generate with npm init.

package-lock.json

    This file locks the exact version of every installed package (and its dependencies).
    It ensures consistent installs across all environments.
    Even if package.json says "express": "^4.18.2", the lock file records the exact version like 4.18.2 and all internal dependencies.
    Generated automatically when you run npm install.
    You should commit this file to Git.

Summary Table

File/Folder	                    Purpose	                                Committed to Git?
node_modules/	        Holds all installed packages	                    ‚ùå (too big)
package.json	        Describes your project and dependencies	            ‚úÖ
package-lock.json	    Locks exact versions for reproducible installs	    ‚úÖ

The ^ symbol in a version string in package.json controls how npm updates dependencies when you run npm install.

"express": "^4.18.2"
This means: You want version 4.18.2 or any newer version that doesn‚Äôt change the major version.

So it will install anything from:   >= 4.18.2 and < 5.0.0

üì¶ Version Symbols

Symbol	Meaning
^	Allow updates that do not change the first (major) version number
~	Allow updates that do not change the second (minor) version number
None	Lock to that exact version only
üî¢ Version Breakdown
In 4.18.2,
        4 = Major version
        18 = Minor version
        2 = Patch version

Why ^ is Common
It's safe (no breaking changes), but allows you to get bug fixes and minor features.
For libraries like Express, this ensures stability unless a major update (like v5) is released.


The ".use" matches all the HTTP method api call to /user
app.use("/user", (req, res) => {
    res.send("Hello from the server")
})

This matches any route which has "/", after that what ever is there, it doessn't matter.
the order or routes are very important, if we will keep this at the top, all the routes will use this.
app.use("/", (req, res) => {
    res.send("Hello from the dashboard")
})

Pattern	                Matches Example	                    Description
/ab?cd	                /abcd, /acd	                        b is optional
/ab+cd	                /abcd, /abbcd	                    b one or more
/ab*cd	                /abcd, /ab123cd	                    Anything between ab and cd
/ab(cd)?e	            /abe, /abcde	                    Group (cd) is optional
/a/	                    /a, /abc, /bat	                    Any route containing "a"
/.*fly$/	            /butterfly, /dragonfly	            Ends with "fly"

Query Parameters (?key=value): Accessed using req.query.
    Example: req.query.search or req.query.page.
    app.get("/user/:id/profile", (req, res) => {
        const {id} = req.params
        res.send(req.query)
        res.send(`id is : ${id} and queried for ${JSON.stringify(req.query)}`)
    })

Dynamic Route Parameters (/route/:param): Accessed using req.params.
    Example: req.params.id or req.params.category.

Q. Why do we need to do JSOn.stringify?

    JavaScript cannot automatically convert an object into a string in a way that makes sense for sending over HTTP or displaying to a user. Here‚Äôs why:

    String Interpolation: When you try to directly embed an object inside a string (e.g., in a template literal), JavaScript has no way to automatically guess how to represent the complex object as a simple string.

    If you try to use an object like { name: "shri", age: "25" } inside a template string:  

        const person = { name: "shri", age: "25" };
        console.log(`The person is: ${person}`);

        JavaScript will try to convert the object into a string using its internal .toString() method, which defaults to:   [object Object]

        So the output will be:  The person is: [object Object]


        const person = { name: "shri", age: "25" };
        const jsonString = JSON.stringify(person);
        console.log(jsonString);  // '{"name":"shri","age":"25"}'

for one path, we can have multiple request handlers.
app.get("/path", rg1, rh2, rh3, rh4)


They can also be put inside array
app.get("/path", rh1, [rh2, rh3], rh4)

We can also separate the app.get

like: 
app.get("/path", rh1, rh2)
app.get("/path", rh3, rh4)

If we have put a res.send and when other res.send is encountered, then it will throw error, 
saying we can not send the headers again

When we call next(), a new functional context is created and pushed. 
Then after that call is completed, the command comes back to hat line again.


- next()
    next() is used to move to the next middleware/route.
    It's required if you want to run multiple functions in sequence for a request.
    If you forget to call next() and don't send a response, the request hangs.
    Very helpful for modular and readable code.

Yes, query parameters are always placed at the end of a URL, after a ?.
    ‚úÖ Path goes before ?
    ‚úÖ Parameters go after ?
    ‚úÖ Multiple parameters use &


- app.use() vs app.all()

    app.use('/admin', (req, res, next) => {
        console.log('Admin middleware');
        next();
    });

    This middleware runs for any route starting with /admin, like /admin/dashboard, /admin/users, etc.

    app.all('/admin', (req, res, next) => {
        console.log('Admin middleware');
        next();
    });

    This middleware runs only for requests to /admin (e.g., GET /admin, POST /admin, etc.).


Scenario	                        Error Thrown?	            Behavior
DB doesn't exist	                    ‚ùå No	            Created on first write
Collection doesn't exist	            ‚ùå No	            Created on first write
findOne() on missing coll	            ‚ùå No	            Returns null
insertOne() on missing DB/coll	        ‚ùå No	            Creates DB and collection



MongoDB vs Mongoose ‚Äì Key Differences
    üîπ MongoDB Native Driver
        Official low-level Node.js driver to interact with MongoDB.
        Directly uses MongoClient, db, and collection to perform operations.
        No schema enforcement ‚Äî flexible, but risks inserting inconsistent data.
        Requires manual validation and relationship handling.
        Slightly better performance, but more boilerplate code.

    üîπ Mongoose (ODM - Object Data Modeling Library)
        A higher-level abstraction over MongoDB for Node.js.
        Provides schemas to define structure of documents.
        Automatically handles data validation before inserting.
        Supports middleware (hooks) like pre-save, post-remove, etc.
        Enables easy implementation of relationships using .populate().
        Built-in methods for CRUD operations like .find(), .save(), .deleteOne() etc.
        Great for building structured, scalable applications.

‚úÖ Why Use Mongoose?
    Schema definition ‚Äì Controls the shape of documents.
    Data validation ‚Äì Ensures data integrity automatically.
    Cleaner code ‚Äì Uses models and methods for easy operations.
    Middleware support ‚Äì Run custom logic during database operations.
    Relationships ‚Äì Use .populate() for referencing other documents.
    Better error handling ‚Äì Mongoose gives descriptive errors.

What is Mongoose?
    Mongoose is an ODM (Object Data Modeling) library for MongoDB and Node.js.
    It provides a way to define schemas, validate data, and use models for easier and cleaner interactions with MongoDB.

üîÑ Mongoose vs MongoDB (native) vs SQL

Feature	            SQL (e.g., MySQL)	        MongoDB Native Driver	Mongoose (ODM for MongoDB)
Database type	        Relational (tables)	NoSQL (documents)	NoSQL (document-based via MongoDB)
Schema required?	    ‚úÖ Yes	                        ‚ùå No	                    ‚úÖ Yes
Validation	            ‚úÖ Built-in	                    ‚ùå Manual	                ‚úÖ Automatic
Relationships	        ‚úÖ JOINs	                        ‚ùå Manual references	        ‚úÖ .populate()
Query language	    SQL (SELECT, INSERT)	MongoDB query methods       Simplified Mongoose methods
Middleware/hooks	Limited	                            ‚ùå Not built-in	          ‚úÖ pre, post hooks
Ease of use	         Moderate	Low-level (more boilerplate)	‚úÖ High-level & beginner-friendly



| Concept        | Meaning                                          |
| -------------- | ------------------------------------------------ |
| `Schema`       | Defines structure of a document                  |
| `Model`        | Gives you functions to create/read/update/delete |
| `.create()`    | Adds a new document                              |
| `.find()`      | Gets documents                                   |
| `.updateOne()` | Modifies one document                            |
| `.deleteOne()` | Deletes one document                             |

| Part                       | Meaning                                                         |
| -------------------------- | --------------------------------------------------------------- |
| `'User'` (model name)      | Name of the model ‚Üí maps to **`users`** collection in MongoDB   |
| `userSchema`               | Defines the **structure** and **rules** for the documents       |
| `const User`               | Variable holding the model class you will use for DB operations |
| ‚úÖ Can name it differently? | Yes, but it‚Äôs best to match with the model for readability      |


1. Model.create({...}) ‚Äì Quick & Clean
    Pros:
        Shorter, cleaner syntax.
        Automatically validates and saves in one step.
        Great for simple use cases like inserting form data.
    When to use:
        In REST API endpoints where you're just inserting user data.
        When you don't need to modify the instance before saving.
    await User.create(req.body); // Best for clean inserts

‚úÖ 2. new Model({...}); instance.save() ‚Äì More Flexible
    Pros:
        Gives you access to the document before saving.
        Lets you add default values, computed fields, or call instance methods.
        Useful for custom logic or async hooks (like pre('save')).
    When to use:
        When you need to manipulate the data before saving.
        When using custom instance methods or pre/post save hooks.

    const user = new User(req.body);
    user.fullName = user.firstName + ' ' + user.lastName;
    await user.save();

Important Notes for .env Files

    No spaces around =:
        ‚ùå Wrong: MONGO_URI = mongodb+srv://user:pass@cluster.mongodb.net/mydb
        ‚úÖ Correct: MONGO_URI=mongodb+srv://user:pass@cluster.mongodb.net/mydb

    No export keyword:
        ‚ùå Wrong: export MONGO_URI=mongodb+srv://...
        ‚úÖ Correct: MONGO_URI=mongodb+srv://...

    No semicolons or commas:
        Always use: KEY=value on each line, no punctuation.

    Use quotes only when needed (e.g., special characters):
        ‚ùå Wrong: PASSWORD=pa$$w0rd with space
        ‚úÖ Correct: PASSWORD="pa$$w0rd with space"

    All values are strings:
        Even numeric values are stored as strings (e.g., PORT=3000).
        If needed, convert to a number:
        const port = Number(process.env.PORT);

Aspect	                JSON	                                                                JavaScript Object
Definition	        Text-based format for data exchange.	                                In-memory data structure in JavaScript.
Syntax	            Strict syntax: keys and strings must use double quotes.	                Flexible syntax: keys can be unquoted; methods allowed.
Data Types	        Supports limited types: string, number, boolean, null, array, object.	Supports all JavaScript data types, including undefined.
Functionality	    No methods or executable code.	                                        Can include methods and execute logic.
Purpose	            Used for transferring data between systems.	                            Used for in-program data manipulation.
Conversion	        Requires parsing to convert to JavaScript Object.	                    Can be directly used in JavaScript programs.


Use JSON.parse() to convert JSON strings into JavaScript Objects.
Use JSON.stringify() to convert JavaScript Objects into JSON strings.

For different content-types, we need different middleware to parse the body.
| Content-Type                        | Meaning / Use Case                  | Middleware Needed          | Parsed Data Location       |
| ----------------------------------- | ----------------------------------- | -------------------------- | -------------------------- |
| `application/json`                  | JSON body (APIs, SPAs)              | `express.json()`           | `req.body`                 |
| `application/x-www-form-urlencoded` | Form data (like from HTML `<form>`) | `express.urlencoded()`     | `req.body`                 |
| `multipart/form-data`               | File uploads via form               | `multer`                   | `req.body` + `req.file(s)` |
| `text/plain`                        | Plain text data                     | Custom or `express.text()` | `req.body`                 |
| `application/octet-stream`          | Binary data (e.g., file buffers)    | Custom handling            | Raw `req` stream           |


| Stack/Language             | JSON Handling                                | Form Data Handling                        | File Uploads Handling                      |
| -------------------------- | -------------------------------------------- | ----------------------------------------- | ------------------------------------------ |
| **Haskell** (Scotty/Yesod) | Use `jsonData` for JSON, `FromJSON` instance | Use `param` or `form` combinators         | Use `multipart` package or Yesod's `fileA` |
| **Go** (Standard Library)  | `json.NewDecoder()` or `json.Unmarshal()`    | `r.FormValue()` for URL-encoded form data | `r.MultipartForm` for file uploads         |
| **Go** (Gin)               | `ShouldBindJSON()` for JSON                  | `c.FormValue()`                           | Use `FormFile()` for file uploads          |

Incoming Request
       ‚Üì
  app.use() (global middleware)
       ‚Üì
  app.use('/somepath') (path-specific middleware)
       ‚Üì
  app.get('/path') or app.post('/path')
       ‚Üì
     Response


‚úÖ Order of app.use() and routes matters.
üîÑ Express goes top-down, and stops if a response is sent (res.send(), res.end(), etc.).
üî• Middleware that should apply globally (like express.json()) must come before any routes that rely on it.

When you use User.findOne({ email: 'example@example.com' }) in Mongoose (MongoDB), 
and multiple documents match the condition (i.e., same email), then:
    Mongoose will return the first document it finds, 
    based on the default internal order of documents in the database (usually insertion order).
    But important to note: MongoDB doesn't guarantee a specific order without .sort().

You should enforce unique email IDs to prevent this situation altogether.


PUT vs PATCH
    PUT
    The PUT method is used to replace an existing resource with an updated version. 
    This method works by replacing the entire resource 
    (i.e., the specific product located at the /products/123 endpoint) with the data 
    that is included in the request‚Äôs body. This means that any fields or properties 
    not included in the request body are deleted, and any new fields or properties are added.

    PATCH
    The PATCH method is used to update an existing resource. It is similar to PUT, 
    except that PATCH enables clients to update specific properties on a resource‚Äîwithout 
    overwriting the others. For instance, if you have a product resource with fields for name, 
    brand, and price, but you only want to update the price, 
    you could use the PATCH method to send a request that only includes the new value 
    for the price field. The rest of the resource would remain unchanged. 
    This behavior makes the PATCH method more flexible and efficient than PUT.

    Also, If we have any field which is not there in the db, then taht will be ignored. 
    If along with price, we send expiry also, it will be ignored and no new key:pair 
    will be created in the document.

bcrypt:

Because bcrypt is not encryption, it's a one-way hashing function.
There's no "unhashing".
Comparison is done by hashing the plain password the same way and seeing if the results match.

$2b$10$HhY1/hZKc1Q9a6A2nN5KOe9CpTw8m0AfVr2TZlAg2LkDoHgSVEQae
This can be broken down as:

    $2b$ ‚Üí bcrypt version.
    10$ ‚Üí cost factor (salt rounds).
    HhY1/hZKc1Q9a6A2nN5KOe ‚Üí the 22-character base64-encoded salt.
    The rest ‚Üí the hashed password result.
So yes, the salt is publicly visible in the hash.

bcrypt.compare(plainPassword, storedHash)
    bcrypt:
        Extracts the salt from storedHash
        Hashes plainPassword with that salt
        Compares the result



Cookies: 

    Cookie Path Behavior: The Path tells the browser which routes (URLs) on your site can access this cookie.

    üîπ Example 1: Path=/ (default)
    
        Set-Cookie: token=abc123; Path=/
        This cookie is sent with every request to:
            /
            /dashboard
            /profile/settings
            /anything    
    ‚úÖ Best for global authentication or tracking cookies.

    üîπ Example 2: Path=/admin

    Set-Cookie: token=abc123; Path=/admin
    This cookie is only sent with requests to:
        /admin
        /admin/settings
        /admin/users

    ‚ùå Not sent to:
        /
        /user
        /dashboard

    ‚úÖ Good for admin-only cookies.

‚úÖ jwt.sign() = create token (data + secret + signature)
‚úÖ jwt.verify() = check token (by recreating and comparing signature)

You don‚Äôt need to ‚Äúdecrypt‚Äù the token ‚Äî JWT is not encrypted, just signed.

- Forgot password API flow:

| Check                      | Needed? |
| -------------------------- | ------- |
| User is logged in          | ‚ùå No    |
| Email exists               | ‚úÖ Yes   |
| Token generation & expiry  | ‚úÖ Yes   |
| Send email with reset link | ‚úÖ Yes   |



